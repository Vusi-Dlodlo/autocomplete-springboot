<!-- Bootstrap Modal -->
<div class="modal fade" id="searchResultsModal" tabindex="-1" aria-labelledby="searchResultsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="searchResultsModalLabel">Search Results</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            
            <!-- Loading Spinner -->
            <div id="loadingSpinner" class="modal-body text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Searching...</p>
            </div>
            
            <!-- Results Container -->
            <div id="resultsContainer" class="modal-body p-0 d-none">
                <div class="table-responsive">
                    <table class="table table-hover table-striped">
                        <thead class="table-light">
                            <tr>
                                <th class="px-4 py-3">Name</th>
                                <th class="px-4 py-3">Description</th>
                                <th class="px-4 py-3">Owner</th>
                            </tr>
                        </thead>
                        <tbody id="resultsTableBody">
                            <!-- Table rows will be inserted here dynamically using the template -->
                        </tbody>
                    </table>
                </div>
                
                <!-- No Results Message -->
                <div id="noResultsMessage" class="text-center py-5 d-none">
                    <div class="text-muted">
                        <i class="bi bi-search fs-1"></i>
                        <p class="mt-3">No matching items found.</p>
                    </div>
                </div>
                
                <!-- Pagination Controls -->
                <div id="paginationContainer" class="d-flex justify-content-between align-items-center p-3 border-top">
                    <div class="text-muted">
                        Showing <span id="startItem">1</span> to <span id="endItem">100</span> of <span id="totalItems">0</span> results
                    </div>
                    <nav aria-label="Search results pages">
                        <ul id="pagination" class="pagination mb-0">
                            <!-- Pagination will be inserted here dynamically -->
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Row Template - This will be cloned for each result -->
<template id="rowTemplate">
    <tr>
        <td class="px-4 py-3 item-name"></td>
        <td class="px-4 py-3 item-description"></td>
        <td class="px-4 py-3 item-owner"></td>
    </tr>
</template>

<!-- Pagination Templates -->
<template id="prevPageTemplate">
    <li class="page-item">
        <a class="page-link" href="#" aria-label="Previous">
            <span aria-hidden="true">&laquo;</span>
        </a>
    </li>
</template>

<template id="nextPageTemplate">
    <li class="page-item">
        <a class="page-link" href="#" aria-label="Next">
            <span aria-hidden="true">&raquo;</span>
        </a>
    </li>
</template>

<template id="pageButtonTemplate">
    <li class="page-item"><a class="page-link" href="#"></a></li>
</template>

<template id="ellipsisTemplate">
    <li class="page-item disabled"><a class="page-link" href="#">...</a></li>
</template>

<!-- Bootstrap Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // DOM Elements
        const searchInput = document.getElementById('searchInput');
        const searchButton = document.getElementById('searchButton');
        const loadingSpinner = document.getElementById('loadingSpinner');
        const resultsContainer = document.getElementById('resultsContainer');
        const resultsTableBody = document.getElementById('resultsTableBody');
        const rowTemplate = document.getElementById('rowTemplate');
        const noResultsMessage = document.getElementById('noResultsMessage');
        const paginationContainer = document.getElementById('paginationContainer');
        const pagination = document.getElementById('pagination');
        const prevPageTemplate = document.getElementById('prevPageTemplate');
        const nextPageTemplate = document.getElementById('nextPageTemplate');
        const pageButtonTemplate = document.getElementById('pageButtonTemplate');
        const ellipsisTemplate = document.getElementById('ellipsisTemplate');
        const startItem = document.getElementById('startItem');
        const endItem = document.getElementById('endItem');
        const totalItems = document.getElementById('totalItems');
        
        // Bootstrap Modal
        const searchResultsModal = new bootstrap.Modal(document.getElementById('searchResultsModal'), {
            backdrop: 'static',
            keyboard: false
        });
        
        // Pagination state
        const state = {
            currentPage: 1,
            itemsPerPage: 100,
            totalPages: 1,
            allResults: [],
            searchTerm: ''
        };
        
        // API configuration - REPLACE THESE VALUES WITH YOUR ACTUAL API DETAILS
        const API_CONFIG = {
            // Replace with your actual API endpoint
            url: 'https://api.example.com/search',
            // Method for the API call
            method: 'GET',
            // Headers to include in the request
            headers: {
                'Content-Type': 'application/json',
                // Add any authentication headers if needed
                // 'Authorization': 'Bearer YOUR_API_TOKEN'
            },
            // Query parameter name for the search term
            searchParam: 'query',
            // Query parameter for pagination (if your API supports it)
            pageParam: 'page',
            pageSizeParam: 'pageSize',
            // Response mapping - adjust these based on your API response structure
            responseMapping: {
                // The property in the response that contains the array of results
                resultsArray: 'items',
                // The property in the response that contains the total count (if available)
                totalCount: 'totalCount',
                // The properties in each result item that map to our display fields
                nameField: 'name',
                descriptionField: 'description',
                ownerField: 'owner'
            }
        };
        
        // Function to fetch data from the API
        async function fetchItemsFromAPI(searchTerm, page = 1) {
            try {
                // Build query parameters
                const queryParams = new URLSearchParams();
                queryParams.append(API_CONFIG.searchParam, searchTerm);
                
                // Add pagination parameters if your API supports server-side pagination
                queryParams.append(API_CONFIG.pageParam, page);
                queryParams.append(API_CONFIG.pageSizeParam, state.itemsPerPage);
                
                // Build the full URL with query parameters
                const url = `${API_CONFIG.url}?${queryParams.toString()}`;
                
                // Make the API request
                const response = await fetch(url, {
                    method: API_CONFIG.method,
                    headers: API_CONFIG.headers
                });
                
                // Check if the request was successful
                if (!response.ok) {
                    throw new Error(`API request failed with status ${response.status}`);
                }
                
                // Parse the JSON response
                const data = await response.json();
                
                // Extract the results array and total count based on the response mapping
                const results = data[API_CONFIG.responseMapping.resultsArray] || [];
                const totalCount = data[API_CONFIG.responseMapping.totalCount] || results.length;
                
                // Map the API response to our internal format
                const mappedResults = results.map(item => ({
                    name: item[API_CONFIG.responseMapping.nameField],
                    description: item[API_CONFIG.responseMapping.descriptionField],
                    owner: item[API_CONFIG.responseMapping.ownerField]
                }));
                
                return {
                    results: mappedResults,
                    totalCount: totalCount
                };
            } catch (error) {
                console.error('Error fetching data from API:', error);
                throw error;
            }
        }
        
        function showModal() {
            // Reset the modal state
            loadingSpinner.classList.remove('d-none');
            resultsContainer.classList.add('d-none');
            noResultsMessage.classList.add('d-none');
            
            // Show the modal
            searchResultsModal.show();
        }
        
        function updatePaginationInfo() {
            const start = (state.currentPage - 1) * state.itemsPerPage + 1;
            const end = Math.min(state.currentPage * state.itemsPerPage, state.allResults.length);
            
            startItem.textContent = start;
            endItem.textContent = end;
            totalItems.textContent = state.allResults.length;
            
            // Generate pagination
            renderPagination();
        }
        
        function renderPagination() {
            pagination.innerHTML = '';
            
            // Add Previous button
            const prevClone = prevPageTemplate.content.cloneNode(true);
            const prevItem = prevClone.querySelector('.page-item');
            const prevLink = prevClone.querySelector('.page-link');
            
            if (state.currentPage === 1) {
                prevItem.classList.add('disabled');
            } else {
                prevLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    goToPage(state.currentPage - 1);
                });
            }
            
            pagination.appendChild(prevClone);
            
            // Determine which page numbers to show
            let startPage = Math.max(1, state.currentPage - 2);
            let endPage = Math.min(state.totalPages, state.currentPage + 2);
            
            // Always show at least 5 pages if available
            if (endPage - startPage < 4) {
                if (startPage === 1) {
                    endPage = Math.min(5, state.totalPages);
                } else if (endPage === state.totalPages) {
                    startPage = Math.max(1, state.totalPages - 4);
                }
            }
            
            // Add first page and ellipsis if needed
            if (startPage > 1) {
                addPageButton(1);
                if (startPage > 2) {
                    addEllipsis();
                }
            }
            
            // Add page numbers
            for (let i = startPage; i <= endPage; i++) {
                addPageButton(i);
            }
            
            // Add last page and ellipsis if needed
            if (endPage < state.totalPages) {
                if (endPage < state.totalPages - 1) {
                    addEllipsis();
                }
                addPageButton(state.totalPages);
            }
            
            // Add Next button
            const nextClone = nextPageTemplate.content.cloneNode(true);
            const nextItem = nextClone.querySelector('.page-item');
            const nextLink = nextClone.querySelector('.page-link');
            
            if (state.currentPage === state.totalPages) {
                nextItem.classList.add('disabled');
            } else {
                nextLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    goToPage(state.currentPage + 1);
                });
            }
            
            pagination.appendChild(nextClone);
        }
        
        function addPageButton(pageNum) {
            const clone = pageButtonTemplate.content.cloneNode(true);
            const pageItem = clone.querySelector('.page-item');
            const pageLink = clone.querySelector('.page-link');
            
            pageLink.textContent = pageNum;
            pageLink.href = '#';
            
            if (pageNum === state.currentPage) {
                pageItem.classList.add('active');
                pageLink.setAttribute('aria-current', 'page');
            } else {
                pageLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    goToPage(pageNum);
                });
            }
            
            pagination.appendChild(clone);
        }
        
        function addEllipsis() {
            const clone = ellipsisTemplate.content.cloneNode(true);
            pagination.appendChild(clone);
        }
        
        function goToPage(pageNum) {
            if (pageNum < 1 || pageNum > state.totalPages || pageNum === state.currentPage) {
                return;
            }
            
            state.currentPage = pageNum;
            
            // If your API supports server-side pagination, you might want to fetch new data here
            // For this example, we're assuming client-side pagination with all results already loaded
            renderTableData();
            updatePaginationInfo();
        }
        
        function renderTableData() {
            const startIndex = (state.currentPage - 1) * state.itemsPerPage;
            const endIndex = Math.min(startIndex + state.itemsPerPage, state.allResults.length);
            const currentPageData = state.allResults.slice(startIndex, endIndex);
            
            // Clear the table body
            resultsTableBody.innerHTML = '';
            
            // Use the template to create rows
            currentPageData.forEach(item => {
                const clone = rowTemplate.content.cloneNode(true);
                
                // Find elements by their class names and set content
                clone.querySelector('.item-name').textContent = item.name;
                clone.querySelector('.item-description').textContent = item.description;
                clone.querySelector('.item-owner').textContent = item.owner;
                
                // Append the new row to the table body
                resultsTableBody.appendChild(clone);
            });
        }
        
        async function performSearch() {
            const searchTerm = searchInput.value.trim();
            state.searchTerm = searchTerm;
            
            if (searchTerm === '') {
                // Optional: Show validation message
                searchInput.classList.add('is-invalid');
                setTimeout(() => {
                    searchInput.classList.remove('is-invalid');
                }, 2000);
                return;
            }
            
            // Show modal with loading state
            showModal();
            
            try {
                // Fetch data from API
                // For testing, use mockFetchForTesting instead of fetchItemsFromAPI
                // In production, use fetchItemsFromAPI
                const apiResponse = await mockFetchForTesting(searchTerm);
                
                // Store all results and update pagination state
                state.allResults = apiResponse.results;
                state.totalPages = Math.ceil(apiResponse.totalCount / state.itemsPerPage);
                state.currentPage = 1;
                
                // Hide loading spinner
                loadingSpinner.classList.add('d-none');
                
                // Update table with results
                if (state.allResults.length > 0) {
                    resultsContainer.classList.remove('d-none');
                    noResultsMessage.classList.add('d-none');
                    paginationContainer.classList.remove('d-none');
                    renderTableData();
                    updatePaginationInfo();
                } else {
                    resultsContainer.classList.remove('d-none');
                    noResultsMessage.classList.remove('d-none');
                    paginationContainer.classList.add('d-none');
                }
            } catch (error) {
                console.error('Error fetching data:', error);
                loadingSpinner.classList.add('d-none');
                resultsContainer.classList.remove('d-none');
                noResultsMessage.classList.remove('d-none');
                noResultsMessage.querySelector('p').textContent = 'An error occurred while fetching data.';
                paginationContainer.classList.add('d-none');
            }
        }
        
        // For testing purposes only - replace this with your actual API implementation
        // This simulates an API response for development/testing
        async function mockFetchForTesting(searchTerm) {
            return new Promise((resolve) => {
                setTimeout(() => {
                    // Generate mock data
                    const mockData = [];
                    for (let i = 0; i < 350; i++) {
                        mockData.push({
                            name: `Item ${i + 1} ${searchTerm ? `matching "${searchTerm}"` : ''}`,
                            description: `Description for item ${i + 1}`,
                            owner: `Owner ${(i % 5) + 1}`
                        });
                    }
                    
                    resolve({
                        results: mockData,
                        totalCount: mockData.length
                    });
                }, 800);
            });
        }
        
        // Event Listeners
        searchButton.addEventListener('click', performSearch);
        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                performSearch();
            }
        });
        
        // Reset search input when modal is closed
        document.getElementById('searchResultsModal').addEventListener('hidden.bs.modal', function () {
            // Optional: Reset search input
            // searchInput.value = '';
        });
    });
</script>
