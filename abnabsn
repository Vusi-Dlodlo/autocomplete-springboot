<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Workitem Search</title>
    <style>
        /* Reset some defaults */
        *, *::before, *::after {
            box-sizing: border-box;
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f8fafc;
            color: #333;
            margin: 0;
            padding: 20px;
            display: flex;
            justify-content: center;
        }
        #appContainer {
            width: 100%;
            max-width: 700px;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 8px 20px rgba(0,0,0,0.1);
            padding: 30px 25px 40px;
            position: relative;
            z-index: 1;
            display: flex;
            flex-direction: column;
            gap: 18px;
        }
        h1 {
            font-weight: 700;
            margin-bottom: 0;
            color: #1f2937;
            text-align: center;
            user-select: none;
        }
        #searchAndButtonContainer {
            display: flex;
            gap: 12px;
            align-items: center;
            width: 100%;
        }
        #searchContainer {
            position: relative;
            flex-grow: 1;
        }
        #workitemSearch {
            width: 100%;
            padding: 12px 50px 12px 20px;
            font-size: 1.1rem;
            border: 2px solid #e0e7ff;
            border-radius: 8px;
            outline-offset: 2px;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
            box-shadow: 0 2px 6px rgba(99, 102, 241, 0.1);
        }
        #workitemSearch:focus {
            border-color: #6366f1;
            box-shadow: 0 0 8px 3px rgba(99, 102, 241, 0.4);
        }
        #searchSpinner {
            position: absolute;
            top: 50%;
            right: 18px;
            transform: translateY(-50%);
            width: 24px;
            height: 24px;
            display: none;
            user-select: none;
        }
        /* Spinner animation */
        #searchSpinner::after {
            content: "";
            display: block;
            width: 20px;
            height: 20px;
            margin: 2px;
            border-radius: 50%;
            border: 3px solid #6366f1;
            border-color: #6366f1 transparent #6366f1 transparent;
            animation: spin 1.2s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg);}
            100% { transform: rotate(360deg);}
        }
        #searchResults {
            border: 1px solid #e0e7ff;
            border-top: none;
            border-radius: 0 0 8px 8px;
            max-height: 280px;
            overflow-y: auto;
            box-shadow: 0 8px 16px rgba(99,102,241,0.15);
            background: white;
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            z-index: 100;
            display: none;
            font-size: 0.95rem;
        }
        .autocomplete-item, .modal-item {
            padding: 12px 20px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            border-bottom: 1px solid #f0f3ff;
            display: flex;
            flex-direction: column;
            user-select: none;
            background: white;
            border-radius: 0;
        }
        .autocomplete-item:last-child, .modal-item:last-child {
            border-bottom: none;
        }
        .autocomplete-item:hover, .modal-item:hover {
            background-color: #eef2ff;
        }
        .autocomplete-item-name, .modal-item-name {
            font-weight: 600;
            color: #4f46e5;
            margin-bottom: 4px;
        }
        .highlight {
            background-color: #fde68a;
            border-radius: 3px;
            padding: 0 3px;
        }
        .autocomplete-item-details, .modal-item-details {
            font-size: 0.85rem;
            color: #6b7280;
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
        }
        .autocomplete-item-details span, .modal-item-details span {
            white-space: nowrap;
            user-select: text;
        }
        .no-results {
            padding: 15px 20px;
            color: #9ca3af;
            font-style: italic;
            text-align: center;
            user-select: none;
        }
        #showAllBtn {
            background-color: #6366f1;
            border: none;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            padding: 12px 24px;
            cursor: pointer;
            user-select: none;
            transition: background-color 0.3s ease, transform 0.2s ease;
            white-space: nowrap;
            flex-shrink: 0;
            min-width: 180px;
        }
        #showAllBtn:hover {
            background-color: #4f46e5;
            transform: scale(1.05);
        }

        /* Container for inputs showing selected workitem details */
        #selectedDetails {
            margin-top: 8px;
            background: #f9fafb;
            padding: 20px 25px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(99, 102, 241, 0.1);
            user-select: none;
        }
        #selectedDetails h3 {
            margin-top: 0;
            margin-bottom: 15px;
            color: #1e293b;
            font-weight: 700;
            letter-spacing: 0.03em;
        }
        #selectedDetails input[type="text"],
        #selectedDetails input[type="email"],
        #selectedDetails textarea {
            width: 100%;
            background: white;
            border: 1.5px solid #d1d5db;
            border-radius: 6px;
            padding: 12px 15px;
            margin-bottom: 15px;
            color: #374151;
            font-size: 1rem;
            resize: vertical;
            user-select: text;
            box-shadow: inset 0 1px 2px rgba(0,0,0,0.05);
            transition: border-color 0.2s ease;
        }
        #selectedDetails input[readonly],
        #selectedDetails textarea[readonly] {
            background-color: #f3f4f6;
            cursor: default;
        }
        #selectedDetails input::placeholder,
        #selectedDetails textarea::placeholder {
            color: #9ca3af;
        }
        #selectedDetails textarea {
            min-height: 80px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        /* Modal styling */
        #modalOverlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(30, 41, 59, 0.7);
            backdrop-filter: blur(5px);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 2000;
            padding: 20px;
        }
        #modalContent {
            background: white;
            max-width: 700px;
            width: 100%;
            max-height: 80vh;
            border-radius: 12px;
            box-shadow: 0 14px 32px rgba(0,0,0,0.15);
            display: flex;
            flex-direction: column;
            overflow: hidden;
            position: relative;
        }
        #modalHeader {
            padding: 18px 24px;
            background: #4f46e5;
            color: white;
            font-weight: 700;
            font-size: 1.3rem;
            user-select: none;
            flex-shrink: 0;
        }
        #modalCloseBtn {
            position: absolute;
            top: 14px;
            right: 14px;
            background: transparent;
            border: none;
            color: white;
            font-size: 1.6rem;
            cursor: pointer;
            user-select: none;
            transition: color 0.3s ease;
        }
        #modalCloseBtn:hover {
            color: #dbeafe;
        }
        #modalBody {
            padding: 15px 20px 20px;
            overflow-y: auto;
            flex-grow: 1;
        }
        @media (max-width: 480px) {
            #appContainer {
                padding: 20px 15px 30px;
            }
            #showAllBtn {
                min-width: 120px;
                flex-shrink: 1;
            }
            #modalContent {
                max-width: 90vw;
            }
        }
    </style>
</head>
<body>

<div id="appContainer" aria-live="polite">
    <h1>Workitem Search</h1>
    
    <div id="searchAndButtonContainer">
        <div id="searchContainer">
            <input type="text" id="workitemSearch" placeholder="Search for workitems..." autocomplete="off" aria-autocomplete="list" aria-expanded="false" aria-controls="searchResults" aria-activedescendant="" />
            <span id="searchSpinner" aria-label="Loading spinner"></span>
            <div id="searchResults" role="listbox" aria-live="polite" aria-atomic="true"></div>
        </div>
        <button id="showAllBtn" type="button" aria-haspopup="dialog" aria-label="Show all matching workitems">Show All</button>
    </div>

    <div id="selectedDetails" aria-live="polite" aria-atomic="true">
        <h3>Selected Workitem Details</h3>
        <input type="hidden" id="workitemIdInput" />
        <input type="text" id="workitemNameInput" placeholder="Workitem Name" readonly aria-label="Workitem Name" />
        <input type="email" id="workitemEmailInput" placeholder="Workitem Email" readonly aria-label="Workitem Email" />
        <textarea id="workitemDescriptionInput" placeholder="Workitem Description" readonly aria-label="Workitem Description"></textarea>
        <input type="text" id="workitemVersionInput" placeholder="Workitem Version" readonly aria-label="Workitem Version" />
    </div>
</div>

<!-- Modal for showing all matching workitems -->
<div id="modalOverlay" role="dialog" aria-modal="true" aria-labelledby="modalTitle" tabindex="-1">
    <div id="modalContent">
        <header id="modalHeader">
            <span id="modalTitle">Matching Workitems</span>
            <button id="modalCloseBtn" aria-label="Close modal">&times;</button>
        </header>
        <main id="modalBody" tabindex="0">
            <!-- List of items will be appended here -->
        </main>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // DOM elements
    const searchInput = document.getElementById('workitemSearch');
    const resultsContainer = document.getElementById('searchResults');
    const spinner = document.getElementById('searchSpinner');
    const showAllBtn = document.getElementById('showAllBtn');

    // Thymeleaf input fields
    const workitemIdInput = document.getElementById('workitemIdInput');
    const workitemNameInput = document.getElementById('workitemNameInput');
    const workitemEmailInput = document.getElementById('workitemEmailInput');
    const workitemDescriptionInput = document.getElementById('workitemDescriptionInput');
    const workitemVersionInput = document.getElementById('workitemVersionInput');

    // Modal elements
    const modalOverlay = document.getElementById('modalOverlay');
    const modalBody = document.getElementById('modalBody');
    const modalCloseBtn = document.getElementById('modalCloseBtn');

    let debounceTimer;
    let lastQuery = '';
    let allWorkitems = [];

    fetchAllWorkitems()
        .then(workitems => {
            allWorkitems = workitems;
            console.log('Cached ' + workitems.length + ' workitems for faster searching');
        })
        .catch(error => {
            console.error('Error pre-fetching workitems:', error);
        });

    searchInput.addEventListener('input', function() {
        const query = this.value.trim();
        lastQuery = query;

        clearTimeout(debounceTimer);
        spinner.style.display = 'block';

        debounceTimer = setTimeout(() => {
            if (query === '') {
                resultsContainer.style.display = 'none';
                spinner.style.display = 'none';
            } else {
                if (allWorkitems.length > 0) {
                    const filteredWorkitems = filterWorkitemsByName(allWorkitems, query);
                    displayResults(filteredWorkitems, query);
                    resultsContainer.style.display = 'block';
                    spinner.style.display = 'none';
                } else {
                    searchWorkitemsByName(query)
                        .then(results => {
                            displayResults(results, query);
                            resultsContainer.style.display = 'block';
                            spinner.style.display = 'none';
                        })
                        .catch(error => {
                            console.error('Error searching workitems:', error);
                            resultsContainer.innerHTML = `
                                <div class="no-results">
                                    <div>Error searching workitems. Please try again.</div>
                                </div>
                            `;
                            resultsContainer.style.display = 'block';
                            spinner.style.display = 'none';
                        });
                }
            }
        }, 300);
    });

    showAllBtn.addEventListener('click', function() {
        const query = searchInput.value.trim();
        if (allWorkitems.length > 0) {
            const filteredWorkitems = filterWorkitemsByName(allWorkitems, query);
            showModalWithItems(filteredWorkitems, query);
        } else {
            fetchAllWorkitems()
                .then(workitems => {
                    allWorkitems = workitems;
                    const filteredWorkitems = filterWorkitemsByName(workitems, query);
                    showModalWithItems(filteredWorkitems, query);
                })
                .catch(error => {
                    console.error('Error fetching all workitems:', error);
                    alert('Error fetching workitems. Please try again.');
                });
        }
    });

    modalCloseBtn.addEventListener('click', closeModal);
    modalOverlay.addEventListener('click', function(e) {
        if (e.target === modalOverlay) {
            closeModal();
        }
    });

    document.addEventListener('keydown', function(e) {
        if (e.key === "Escape" && modalOverlay.style.display === "flex") {
            closeModal();
        }
    });

    function showModalWithItems(workitems, query) {
        modalBody.innerHTML = '';

        if (workitems.length === 0) {
            modalBody.innerHTML = `<div class="no-results">No workitems found${query ? \` for "\${query}"\` : ''}.</div>`;
        } else {
            if (query) {
                workitems = sortWorkitemsByNameRelevance(workitems, query);
            }
            workitems.forEach(workitem => {
                const div = document.createElement('div');
                div.className = 'modal-item';

                const name = workitem.name || 'Unnamed Workitem';
                const email = workitem.email || 'No Email';
                const description = workitem.description || 'No Description';
                const version = workitem.version || 'N/A';

                const highlightedName = query ? highlightMatch(name, query) : name;

                div.innerHTML = `
                    <div class="modal-item-name">${highlightedName}</div>
                    <div class="modal-item-details">
                        <span>Email: ${email}</span>
                        <span>Description: ${description}</span>
                        <span>Version: ${version}</span>
                    </div>
                `;

                div.addEventListener('click', () => {
                    selectWorkitem(workitem);
                    closeModal();
                    searchInput.value = name;
                    resultsContainer.style.display = 'none';
                    searchInput.focus();
                });

                modalBody.appendChild(div);
            });
        }

        modalOverlay.style.display = 'flex';
        modalOverlay.focus();
        resultsContainer.style.display = 'none';
    }

    function closeModal() {
        modalOverlay.style.display = 'none';
    }

    searchInput.addEventListener('focus', function() {
        resultsContainer.style.display = 'none';
    });

    async function searchWorkitemsByName(query) {
        try {
            if (allWorkitems.length > 0) {
                return filterWorkitemsByName(allWorkitems, query);
            }

            const response = await fetch(\`/api/workitems/search?keyword=\${encodeURIComponent(query)}\`);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            return await response.json();
        } catch (error) {
            console.error('Error searching workitems:', error);
            throw error;
        }
    }

    function filterWorkitemsByName(workitems, query) {
        if (!query) return workitems;

        const lowerQuery = query.toLowerCase();

        return workitems.filter(workitem => {
            const workitemName = (workitem.name || '').toLowerCase();
            return workitemName.includes(lowerQuery);
        });
    }

    async function fetchAllWorkitems() {
        try {
            const response = await fetch('/api/workitems');
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return await response.json();
        } catch (error) {
            console.error('Error fetching all workitems:', error);
            throw error;
        }
    }

    function displayResults(workitems, query) {
        resultsContainer.innerHTML = '';

        if (workitems.length === 0) {
            resultsContainer.innerHTML = `
                <div class="no-results">
                    <div>No workitems found${query ? \` for "\${query}"\` : ''}</div>
                </div>
            `;
            resultsContainer.style.display = 'block';
            return;
        }

        if (query) {
            workitems = sortWorkitemsByNameRelevance(workitems, query);
        }

        workitems.forEach(workitem => {
            const div = document.createElement('div');
            div.className = 'autocomplete-item';

            const name = workitem.name || 'Unnamed Workitem';
            const email = workitem.email || 'No Email';
            const description = workitem.description || 'No Description';
            const version = workitem.version || 'N/A';

            const highlightedName = query ? highlightMatch(name, query) : name;

            div.innerHTML = `
                <div class="autocomplete-item-name">${highlightedName}</div>
                <div class="autocomplete-item-details">
                    <span>Email: ${email}</span>
                    <span>Description: ${description}</span>
                    <span>Version: ${version}</span>
                </div>
            `;

            div.addEventListener('click', () => {
                selectWorkitem(workitem);
                resultsContainer.style.display = 'none';
                searchInput.value = name;
            });

            resultsContainer.appendChild(div);
        });

        resultsContainer.style.display = 'block';
    }

    function sortWorkitemsByNameRelevance(workitems, query) {
        const lowerQuery = query.toLowerCase();

        return workitems.sort((a, b) => {
            const aName = (a.name || '').toLowerCase();
            const bName = (b.name || '').toLowerCase();

            const aStartsWithQuery = aName.startsWith(lowerQuery);
            const bStartsWithQuery = bName.startsWith(lowerQuery);

            if (aStartsWithQuery && !bStartsWithQuery) return -1;
            if (!aStartsWithQuery && bStartsWithQuery) return 1;

            const aContainsWordQuery = new RegExp('\\b' + escapeRegExp(lowerQuery) + '\\b').test(aName);
            const bContainsWordQuery = new RegExp('\\b' + escapeRegExp(lowerQuery) + '\\b').test(bName);

            if (aContainsWordQuery && !bContainsWordQuery) return -1;
            if (!aContainsWordQuery && bContainsWordQuery) return 1;

            const aContainsQuery = aName.includes(lowerQuery);
            const bContainsQuery = bName.includes(lowerQuery);

            if (aContainsQuery && !bContainsQuery) return -1;
            if (!aContainsQuery && bContainsQuery) return 1;

            return aName.length - bName.length;
        });
    }

    function selectWorkitem(workitem) {
        workitemIdInput.value = workitem.id || '';
        workitemNameInput.value = workitem.name || '';
        workitemEmailInput.value = workitem.email || '';
        workitemDescriptionInput.value = workitem.description || '';
        workitemVersionInput.value = workitem.version || '';

        console.log('Selected workitem:', JSON.stringify({
            id: workitem.id,
            name: workitem.name,
            email: workitem.email,
            description: workitem.description,
            version: workitem.version
        }));
    }

    function highlightMatch(text, query) {
        if (!query || !text) return text || '';

        const escapedQuery = escapeRegExp(query);
        const regex = new RegExp(\`(\${escapedQuery})\`, 'gi');

        return text.replace(regex, '<span class="highlight">$1</span>');
    }

    function escapeRegExp(string) {
        return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');
    }

    document.addEventListener('click', function(e) {
        if (!searchInput.contains(e.target) &&
            !resultsContainer.contains(e.target) &&
            modalOverlay.style.display !== 'flex') {
            resultsContainer.style.display = 'none';
        }
    });

});
</script>

</body>
</html>
